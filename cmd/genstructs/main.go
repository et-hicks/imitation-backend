package main

import (
	"bufio"
	"bytes"
	"fmt"
	"go/format"
	"os"
	"path/filepath"
	"regexp"
	"strings"
)

type Column struct {
	Name string
	Type string
}

type Table struct {
	Name    string
	Columns []Column
}

func main() {
	schema, err := os.ReadFile("schema.sql")
	if err != nil {
		panic(err)
	}
	tables := parseSchema(string(schema))
	if err := writeStructs("models/models.go", tables); err != nil {
		panic(err)
	}
}

var createTableRe = regexp.MustCompile(`(?i)CREATE TABLE IF NOT EXISTS (\w+)`)

func parseSchema(s string) []Table {
	scanner := bufio.NewScanner(strings.NewReader(s))
	var tables []Table
	var tbl *Table
	for scanner.Scan() {
		line := strings.TrimSpace(scanner.Text())
		if line == "" || strings.HasPrefix(line, "--") {
			continue
		}
		if tbl == nil {
			if m := createTableRe.FindStringSubmatch(line); m != nil {
				tbl = &Table{Name: m[1]}
			}
			continue
		}
		if line == ");" {
			tables = append(tables, *tbl)
			tbl = nil
			continue
		}
		line = strings.TrimSuffix(line, ",")
		parts := strings.Fields(line)
		if len(parts) < 2 {
			continue
		}
		colName := parts[0]
		colType := parts[1]
		if colName == "PRIMARY" || colName == "FOREIGN" || colName == "UNIQUE" {
			continue
		}
		tbl.Columns = append(tbl.Columns, Column{Name: colName, Type: colType})
	}
	return tables
}

func writeStructs(filename string, tables []Table) error {
	var buf bytes.Buffer
	buf.WriteString("// Code generated by cmd/genstructs; DO NOT EDIT.\n")
	buf.WriteString("package models\n\n")
	if usesTime(tables) {
		buf.WriteString("import \"time\"\n\n")
	}
	for _, t := range tables {
		typeName := toCamel(singularize(t.Name))
		buf.WriteString(fmt.Sprintf("type %s struct {\n", typeName))
		for _, c := range t.Columns {
			buf.WriteString(fmt.Sprintf("\t%s %s `json:\"%s\"`\n", toCamel(c.Name), sqlTypeToGo(c.Type), c.Name))
		}
		buf.WriteString("}\n\n")
	}
	formatted, err := format.Source(buf.Bytes())
	if err != nil {
		return err
	}
	if err := os.MkdirAll(filepath.Dir(filename), 0o755); err != nil {
		return err
	}
	return os.WriteFile(filename, formatted, 0o644)
}

func usesTime(tables []Table) bool {
	for _, t := range tables {
		for _, c := range t.Columns {
			if sqlTypeToGo(c.Type) == "time.Time" {
				return true
			}
		}
	}
	return false
}

func sqlTypeToGo(s string) string {
	s = strings.ToUpper(s)
	switch s {
	case "SERIAL", "INTEGER":
		return "int"
	case "TEXT":
		return "string"
	case "BOOLEAN":
		return "bool"
	case "TIMESTAMPTZ", "TIMESTAMP":
		return "time.Time"
	default:
		return "any"
	}
}

func toCamel(s string) string {
	parts := strings.Split(s, "_")
	for i, p := range parts {
		switch strings.ToLower(p) {
		case "id":
			parts[i] = "ID"
		case "url":
			parts[i] = "URL"
		default:
			parts[i] = strings.Title(p)
		}
	}
	return strings.Join(parts, "")
}

func singularize(s string) string {
	if strings.HasSuffix(s, "s") {
		return s[:len(s)-1]
	}
	return s
}
